=================================
How to use `1-my_list.py` module
==================================

This module defines a class ``MyList`` that inherits from ``list``.
--------------------------------------------------------------------

Instantiation
=============


``MyList`` can be instantiated with no arguments, which will return
an empty list:
::

>>> MyList = __import__('1-my_list').MyList 
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>
>>> print(my_list)
[]


Or a single iterable object as argument.
::

>>> my_list = MyList([2,5,6])
>>> print(my_list)
[2, 5, 6]


A typerror will be raised for any more than one instantiation of arguments or
if the argument isnt an iterable
::

>>> my_list = MyList(None)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable
>>> 


>>> my_list = MyList([2,3], [4,5])
Traceback (most recent call last):
TypeError: list expected at most 1 argument, got 2

=====
Usage
=====

``MyList`` is an inherited ``list`` class, and thus features the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.

::

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> print(my_list)
[1, 2, 3]

Replaced with indexing:

::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

And removed with the ``remove()`` method.

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

See the documentation on Python lists for more built-in methods.


``print_sorted`` Method
=======================

`The subclass MyList implemets its own public instance method
print_sorted(self)`.

::
>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>

The method takes no arguments - a TypeError will be raised if an argument is
provided.

::
>>> my_list.print_sorted(0)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given


The method prints the list in ascending sorted order.

::
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]

::
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

The order of the original list is not altered after a call to the method.

::
>>> print(my_list)
[1, 4, 2, 3, 5]

Strings are sorted in lexographical order
::

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> my_list.append('Alx')
>>> my_list.append('Philip')
>>> my_list.append('Ukanwoke')
>>> my_list.append('Inheritance')
>>> my_list.print_sorted()
['Alx', 'Inheritance', 'Philip', 'Ukanwoke']
>>> print(my_list)
['Alx', 'Philip', 'Ukanwoke', 'Inheritance']

Nothing to sort with empty lists.

::
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

>>> my_list = MyList([1, "Phil", "alx", 5])
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'str' and 'int'



Module docstring:
       >>> m_doc = __import__('1-my_list').__doc__
       >>> len(m_doc) > 1
       True

Class docstring:
      >>> c_doc = __import__('1-my_list').MyList.__doc__
    >>> len(c_doc) > 1
    True
 
Method docstring:
    >>> m_doc = __import__('1-my_list').MyList.print_sorted.__doc__
    >>> len(m_doc) > 1
    True
